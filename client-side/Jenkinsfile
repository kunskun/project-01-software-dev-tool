pipeline {
    agent any

    stages {
        stage('Pull code') {
            steps {
                checkout scm
            }
        }
        stage('Download dependency') {
            steps {
                sh 'cd client-side && yarn install'
            }
        }
        stage('Run Unit test') {
            steps {
                sh 'cd client-side && yarn run test'
            }
        }
        stage('Run Component test') {
            steps {
                echo 'run component test'
            }
        }
        stage('Create Test Report'){
            steps {
                clover(cloverReportDir: 'client-side/coverage', cloverReportFileName: 'clover.xml',
                    healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                    unhealthyTarget: [methodCoverage: 40, conditionalCoverage: 50, statementCoverage: 50],
                    failingTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0]
                )

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "./client-side/coverage/lcov-report",
                    reportFiles: "index.html",
                    reportName: 'Unit Test Report'
                ]
            }
        }
        stage('Deployment') {
            steps {
                script{
                    def remote = [:]
                    remote.name = "root"
                    remote.host = '159.65.12.177'
                    remote.user = 'root'
                    remote.password = 'xitgmLwmp12q'
                    remote.allowAnyHosts = true
                    sshCommand remote: remote, command: "git clone https://github.com/peetnawapol/project-01-software-dev-tool"
                    sshCommand remote: remote, command: "docker-compose -f project-01-software-dev-tool/docker-compose-build.yml build client-side"
                    sshCommand remote: remote, command: "docker-compose -f project-01-software-dev-tool/docker-compose-deploy.yml down"
                    sshCommand remote: remote, command: "docker-compose -f project-01-software-dev-tool/docker-compose-deploy.yml up -d client-side"
                    sshCommand remote: remote, command: "rm -r project-01-software-dev-tool"
                }
            }
            post{
                failure{
                    script{
                        def testing = build job: "team-5-frontend"
                        sh '$testing.getNumber()'
                    }
                    withCredentials([gitUsernamePassword(credentialsId: 'frontend-server', gitToolName: 'git-tool')]) {
                    sh 'git tag -d ' + '1.0.'+ $testing.getNumber()
                    }
                        
                }
            }
        }
        stage('Run E2E test') {
            steps {
                echo 'E2E command test'
            }
        }
    }
}
